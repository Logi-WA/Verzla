package is.hi.verzla_backend.entities;

import com.fasterxml.jackson.annotation.JsonBackReference;

import java.util.UUID;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.PositiveOrZero;

/**
 * Represents an item within an order, containing details about the product, quantity, and price.
 *
 * <p>This entity captures the details of a specific product purchased as part of an order, including:
 * <ul>
 *   <li>The specific product that was purchased</li>
 *   <li>The quantity of the product ordered</li>
 *   <li>The price of the product at the time of purchase</li>
 *   <li>The parent order containing this item</li>
 * </ul>
 * </p>
 *
 * <p>OrderItem entities serve as an important historical record, as they preserve the price
 * at the time of purchase, which may differ from the current product price. This allows for
 * accurate order history display and financial reporting even if product prices change over time.</p>
 *
 * <p>The OrderItem entity has a many-to-one relationship with both Order (the parent order)
 * and Product (the purchased product). These relationships are essential for order tracking
 * and inventory management in the e-commerce system.</p>
 *
 * @see is.hi.verzla_backend.entities.Order
 * @see is.hi.verzla_backend.entities.Product
 * @see is.hi.verzla_backend.services.OrderService
 */
@Entity
@Table(name = "order_items")
public class OrderItem {

    /**
     * The unique identifier of the order item.
     * <p>
     * This ID is autogenerated as a UUID and serves as the primary key in the database.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    /**
     * The parent order containing this order item.
     * <p>
     * Cannot be null. Represents the order that contains this specific purchased item.
     * The JsonBackReference annotation prevents infinite recursion during serialization
     * by breaking the bidirectional relationship between Order and OrderItem.
     * </p>
     */
    @NotNull(message = "Order cannot be null")
    @ManyToOne
    @JoinColumn(name = "order_id")
    @JsonBackReference
    private Order order;

    /**
     * The product that was purchased in this order item.
     * <p>
     * Cannot be null. Represents the specific product that was ordered by the customer.
     * </p>
     */
    @NotNull(message = "Product cannot be null")
    @ManyToOne
    @JoinColumn(name = "product_id")
    private Product product;

    /**
     * The quantity of the product purchased in this order item.
     * <p>
     * Must be a positive integer (greater than zero). Represents how many units of
     * the specified product were purchased.
     * </p>
     */
    @Positive(message = "Quantity must be positive")
    private int quantity;

    /**
     * The price of the product at the time of purchase.
     * <p>
     * Must be zero or positive. This field captures the product's price when the order
     * was placed, which may differ from the current price of the product. This ensures
     * accurate historical records of purchases.
     * </p>
     */
    @PositiveOrZero(message = "Price must be zero or positive")
    private double price;

    /**
     * Gets the ID of the order item.
     *
     * @return the ID of the order item.
     */
    public UUID getId() {
        return id;
    }

    /**
     * Sets the ID of the order item.
     *
     * @param id the ID to set.
     */
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Gets the order associated with this item.
     *
     * @return the associated order.
     */
    public Order getOrder() {
        return order;
    }

    /**
     * Sets the order associated with this item.
     *
     * @param order the order to associate with this item.
     */
    public void setOrder(Order order) {
        this.order = order;
    }

    /**
     * Gets the product associated with this item.
     *
     * @return the associated product.
     */
    public Product getProduct() {
        return product;
    }

    /**
     * Sets the product associated with this item.
     *
     * @param product the product to associate with this item.
     */
    public void setProduct(Product product) {
        this.product = product;
    }

    /**
     * Gets the quantity of the product in the order.
     *
     * @return the quantity of the product.
     */
    public int getQuantity() {
        return quantity;
    }

    /**
     * Sets the quantity of the product in the order.
     *
     * @param quantity the quantity to set.
     */
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    /**
     * Gets the price of the product in the order.
     *
     * @return the price of the product.
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price of the product in the order.
     *
     * @param price the price to set.
     */
    public void setPrice(double price) {
        this.price = price;
    }
}
