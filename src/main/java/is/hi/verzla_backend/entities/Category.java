package is.hi.verzla_backend.entities;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.validation.constraints.NotEmpty;

/**
 * Represents a product category that can be associated with multiple products.
 *
 * <p>This entity serves as a classification mechanism for products in the Verzla e-commerce system.
 * Categories allow customers to browse products by type and enable administrators to organize
 * the product catalog efficiently.</p>
 *
 * <p>Categories maintain a many-to-many relationship with products, allowing:
 * <ul>
 *   <li>Each product to belong to multiple categories</li>
 *   <li>Each category to contain multiple products</li>
 * </ul>
 * This flexible relationship supports complex product categorization schemes where products
 * can be classified in multiple ways simultaneously.</p>
 *
 * <p>The Category entity is essential for:
 * <ul>
 *   <li>Filtering product listings by category</li>
 *   <li>Building navigation menus in the storefront</li>
 *   <li>Supporting search functionality with category-based refinements</li>
 *   <li>Enabling product recommendations based on category relationships</li>
 * </ul>
 * </p>
 *
 * @see is.hi.verzla_backend.entities.Product
 * @see is.hi.verzla_backend.controllers.CategoryController
 */
@Entity
public class Category {

    /**
     * The unique identifier of the category.
     * <p>
     * This ID is autogenerated as a UUID and serves as the primary key in the database.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    /**
     * The name of the category.
     * <p>
     * Cannot be empty. This field is used for display purposes and for identifying
     * the category in the user interface.
     * </p>
     */
    @NotEmpty(message = "Category name cannot be empty")
    private String name;

    /**
     * The set of products associated with this category.
     * <p>
     * This represents a many-to-many relationship where each product can belong to
     * multiple categories, and each category can contain multiple products. The relationship
     * is mapped by the "categories" field in the Product entity.
     * </p>
     */
    @ManyToMany(mappedBy = "categories")
    private Set<Product> products = new HashSet<>();

    /**
     * Default constructor for JPA.
     */
    public Category() {
    }

    /**
     * Constructor to initialize the category with a name.
     *
     * @param name the name of the category.
     */
    public Category(String name) {
        this.name = name;
    }

    /**
     * Gets the ID of the category.
     *
     * @return the ID of the category.
     */
    public UUID getId() {
        return id;
    }

    /**
     * Sets the ID of the category.
     *
     * @param id the ID to set.
     */
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Gets the name of the category.
     *
     * @return the name of the category.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the category.
     *
     * @param name the name to set.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the set of products associated with this category.
     *
     * @return the set of products.
     */
    public Set<Product> getProducts() {
        return products;
    }

    /**
     * Sets the products associated with this category.
     *
     * @param products the set of products to associate with this category.
     */
    public void setProducts(Set<Product> products) {
        this.products = products;
    }
}
